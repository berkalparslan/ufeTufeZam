const axios = require('axios');
const cheerio = require('cheerio');

// TÃœFE verilerini Ã§ekme fonksiyonu
async function fetchTufeRates() {
    try {
        const response = await axios.get('https://www.tcmb.gov.tr/wps/wcm/connect/TR/TCMB+TR/Main+Menu/Istatistikler/Enflasyon+Verileri/Tuketici+Fiyatlari');
        const $ = cheerio.load(response.data);
        
        const tufeData = [];
        
        // Tablo hÃ¼crelerinden TÃœFE verilerini Ã§ekme (Tablo yapÄ±sÄ±na gÃ¶re Ã¶zelleÅŸtirilebilir)
        $('table tr').each((index, element) => {
            const row = $(element).find('td');
            const month = $(row[0]).text();  // Ay sÃ¼tunu
            const tufe = parseFloat($(row[2]).text());  // TÃœFE sÃ¼tunu

            if (!isNaN(tufe)) {
                tufeData.push({ month, tufe });
            }
        });

        // Son 6 ayÄ±n TÃœFE verilerini al
        const lastSixMonthsTufe = tufeData.slice(0, 6);
        console.log("ğŸš€ ~ fetchTufeRates ~ lastSixMonthsTufe:", lastSixMonthsTufe)
        return lastSixMonthsTufe.map(data => data.tufe);

    } catch (error) {
        console.error('TÃœFE verisi Ã§ekme hatasÄ±:', error);
    }
}

// ÃœFE verilerini Ã§ekme fonksiyonu
async function fetchUfeRates() {
    try {
        const response = await axios.get('https://www.tcmb.gov.tr/wps/wcm/connect/TR/TCMB+TR/Main+Menu/Istatistikler/Enflasyon+Verileri/Uretici+Fiyatlari');
        const $ = cheerio.load(response.data);
        
        const ufeData = [];
        
        // Tablo hÃ¼crelerinden ÃœFE verilerini Ã§ekme (Tablo yapÄ±sÄ±na gÃ¶re Ã¶zelleÅŸtirilebilir)
        $('table tr').each((index, element) => {
            const row = $(element).find('td');
            const month = $(row[0]).text();  // Ay sÃ¼tunu
            const ufe = parseFloat($(row[4]).text());  // ÃœFE sÃ¼tunu

            if (!isNaN(ufe)) {
                ufeData.push({ month, ufe });
            }
        });

        // Son 6 ayÄ±n ÃœFE verilerini al
        const lastSixMonthsUfe = ufeData.slice(0, 6);
        console.log("ğŸš€ ~ fetchUfeRates ~ lastSixMonthsUfe:", lastSixMonthsUfe)
        return lastSixMonthsUfe.map(data => data.ufe);

    } catch (error) {
        console.error('ÃœFE verisi Ã§ekme hatasÄ±:', error);
    }
}

// KullanÄ±cÄ±nÄ±n girdiÄŸi deÄŸeri TÃœFE ve ÃœFE ortalamasÄ±na gÃ¶re artÄ±rma fonksiyonu
async function calculateWithInflation(userInput) {
    try {
        const tufeRates = await fetchTufeRates();
        const ufeRates = await fetchUfeRates();

        // Son 6 ayÄ±n TÃœFE ve ÃœFE verilerini kullanarak ortalama enflasyon oranÄ±nÄ± hesaplama
        let totalInflation = 0;
        for (let i = 0; i < tufeRates.length; i++) {
            totalInflation += (tufeRates[i] + (ufeRates[i] / 2));
        }
        const averageInflationRate = totalInflation / tufeRates.length;
        console.log("ğŸš€ ~ calculateWithInflation ~ totalInflation:", totalInflation)
        console.log("ğŸš€ ~ calculateWithInflation ~ averageInflationRate:", averageInflationRate)

        // KullanÄ±cÄ± girdisini enflasyon oranÄ±nda artÄ±rma
        const updatedValue = userInput * (1 + totalInflation / 100);
        console.log(`GÃ¼ncellenmiÅŸ DeÄŸer: ${updatedValue.toFixed(2)} TL`);
    } catch (error) {
        console.error('Hesaplama sÄ±rasÄ±nda bir hata oluÅŸtu:', error);
    }
}

// KullanÄ±cÄ±dan alÄ±nan Ã¶rnek deÄŸer
const userInput = 50000; // Bu deÄŸeri kullanÄ±cÄ±dan input olarak alabilirsin
calculateWithInflation(userInput);
